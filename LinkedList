/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */

// Quick Sort, it can be randomized using randomized pivot but that in cost we have to traverse the array to find the pivot element randomly which is in worst case O(N);
class Solution {
public:
    ListNode* sortList(ListNode* head) {
        ListNode* temp = head;
        int r=0;
        while(temp!=NULL){
            temp = temp->next;
            r++;
        }
        util(head, r-1);
        return head;
    }
    void util(ListNode* head, int r){
        if(head==NULL || r<=0)
            return;
        int ran = rand() % (r+1);
        
        ListNode* temp = head;
        ListNode* last_smaller = head;
        int x = 0;
        int t = r;
        while(t--){
            temp = temp->next;
            if(temp->val < head->val){
                x++;
                last_smaller = last_smaller->next;
                swap(temp->val, last_smaller->val);
            }
        }
        swap(last_smaller->val, head->val);
        util(head, x-1);
        util(last_smaller->next, (r-x-1) );
    }
};









